{"version":3,"sources":["formatter/unix-timestamp-formatter-test.ts","integration/parse-format/unix-timestamp-ms-test.ts","integration/parse-format/unix-timestamp-test.ts","parser/date-parser-test.ts","parser/string-parser-test.ts","parser/unix-timestamp-parser-test.ts"],"names":[],"mappings":"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","file":"tests.js","sourcesContent":["module DateSliderTest.Formatter {\r\n    describe(\"Unix timestamp formatter.\", () => {\r\n        let formatter: DateSlider.Formatter.UnixTimestampFormatter;\r\n        let msOptions: DateSlider.Formatter.UnixTimestampFormatterOptions;\r\n        let secondOptions: DateSlider.Formatter.UnixTimestampFormatterOptions;\r\n\r\n        beforeEach(() => {\r\n            formatter = new DateSlider.Formatter.UnixTimestampFormatter();\r\n            msOptions = new DateSlider.Formatter.UnixTimestampFormatterOptions(\"milliseconds\");\r\n            secondOptions = new DateSlider.Formatter.UnixTimestampFormatterOptions(\"seconds\");\r\n        });\r\n\r\n        let runs = [\r\n            { input: new DateSlider.DateSliderModel(new DateSlider.InnerModel(1969, 1, 1, 0, 0, 0), 0),    output: -31536000, description: \"Valid model: negative timestamp.\" },\r\n            { input: new DateSlider.DateSliderModel(new DateSlider.InnerModel(1970, 1, 1, 0, 0, 0), 0),    output: 0,         description: \"Valid model.\" },\r\n            { input: new DateSlider.DateSliderModel(new DateSlider.InnerModel(2000, 1, 1, 0, 0, 0), 0),    output: 946684800, description: \"Valid model.\" },\r\n            { input: new DateSlider.DateSliderModel(new DateSlider.InnerModel(2000, 12, 31, 0, 0, 0), 0),  output: 978220800, description: \"Valid model.\" },\r\n            { input: new DateSlider.DateSliderModel(new DateSlider.InnerModel(2000, 1, 1, 12, 30, 30), 0), output: 946729830, description: \"Valid model.\" },\r\n            { input: new DateSlider.DateSliderModel(new DateSlider.InnerModel(2000, 1, 1, 23, 59, 59), 0), output: 946771199, description: \"Valid model.\" },\r\n        ];\r\n\r\n        runs.forEach((run) => {\r\n            it(run.description, () => {\r\n                expect(formatter.format(run.input, secondOptions)).toEqual(run.output);\r\n            });\r\n        });\r\n\r\n        runs.forEach((run) => {\r\n            it(run.description, () => {\r\n                expect(formatter.format(run.input, msOptions)).toEqual(run.output * 1000);\r\n            });\r\n        });\r\n    });\r\n}\r\n","module DateSliderTest.Integration.ParseFormat {\r\n    describe(\"Unix timestamp in milliseconds parsing and formatting.\", () => {\r\n        let parser: DateSlider.Parser.UnixTimestampParser;\r\n        let formatter: DateSlider.Formatter.UnixTimestampFormatter;\r\n        let parserOptions: DateSlider.Parser.UnixTimestampParserOptions;\r\n        let formatterOptions: DateSlider.Formatter.UnixTimestampFormatterOptions;\r\n\r\n        beforeEach(() => {\r\n            parser = new DateSlider.Parser.UnixTimestampParser();\r\n            formatter = new DateSlider.Formatter.UnixTimestampFormatter();\r\n            parserOptions = new DateSlider.Parser.UnixTimestampParserOptions(\"milliseconds\");\r\n            formatterOptions = new DateSlider.Formatter.UnixTimestampFormatterOptions(\"milliseconds\");\r\n        });\r\n\r\n        let runs = [\r\n            { input: -31536000000, output: -31536000000, description: \"Valid timestamp: negative.\" },\r\n            { input: 0,            output: 0,            description: \"Valid timestamp.\" },\r\n            { input: 946684800000, output: 946684800000, description: \"Valid timestamp.\" },\r\n            { input: 978220800000, output: 978220800000, description: \"Valid timestamp.\" },\r\n            { input: 946729830000, output: 946729830000, description: \"Valid timestamp.\" },\r\n            { input: 946771199000, output: 946771199000, description: \"Valid timestamp.\" },\r\n            { input: 946771199542, output: 946771199000, description: \"Valid timestamp: rounding down milliseconds > 500.\" },\r\n            { input: 946771199500, output: 946771199000, description: \"Valid timestamp: rounding down milliseconds = 500.\" },\r\n            { input: 946771199042, output: 946771199000, description: \"Valid timestamp: rounding down milliseconds < 500.\" },\r\n        ];\r\n\r\n        runs.forEach((run) => {\r\n            it(run.description, () => {\r\n                expect(formatter.format(parser.parse(run.input, parserOptions), formatterOptions)).toEqual(run.output);\r\n            });\r\n        });\r\n    });\r\n}\r\n","module DateSliderTest.Integration.ParseFormat {\r\n    describe(\"Unix timestamp parsing and formatting.\", () => {\r\n        let parser: DateSlider.Parser.UnixTimestampParser;\r\n        let formatter: DateSlider.Formatter.UnixTimestampFormatter;\r\n        let parserOptions: DateSlider.Parser.UnixTimestampParserOptions;\r\n        let formatterOptions: DateSlider.Formatter.UnixTimestampFormatterOptions;\r\n\r\n        beforeEach(() => {\r\n            parser = new DateSlider.Parser.UnixTimestampParser();\r\n            formatter = new DateSlider.Formatter.UnixTimestampFormatter();\r\n            parserOptions = new DateSlider.Parser.UnixTimestampParserOptions(\"seconds\");\r\n            formatterOptions = new DateSlider.Formatter.UnixTimestampFormatterOptions(\"seconds\");\r\n        });\r\n\r\n        let runs = [\r\n            { input: -31536000, description: \"Valid timestamp: negative.\" },\r\n            { input: 0,         description: \"Valid timestamp.\" },\r\n            { input: 946684800, description: \"Valid timestamp.\" },\r\n            { input: 978220800, description: \"Valid timestamp.\" },\r\n            { input: 946729830, description: \"Valid timestamp.\" },\r\n            { input: 946771199, description: \"Valid timestamp.\" },\r\n        ];\r\n\r\n        runs.forEach((run) => {\r\n            it(run.description, () => {\r\n                expect(formatter.format(parser.parse(run.input, parserOptions), formatterOptions)).toEqual(run.input);\r\n            });\r\n        });\r\n    });\r\n}\r\n","module DateSliderTest.Parser {\r\n    describe(\"Date parser.\", () => {\r\n        let parser: DateSlider.Parser.DateParser;\r\n        let utcOptions: DateSlider.Parser.DateParserOptions;\r\n\r\n        beforeEach(() => {\r\n            parser = new DateSlider.Parser.DateParser();\r\n            utcOptions = new DateSlider.Parser.DateParserOptions(\"utc\");\r\n        });\r\n\r\n        let throws = [\r\n            { input: -1,        description: \"Invalid date: negative number.\" },\r\n            { input: 0,         description: \"Invalid date: zero.\" },\r\n            { input: 1,         description: \"Invalid date: number.\" },\r\n            { input: true,      description: \"Invalid date: true.\" },\r\n            { input: false,     description: \"Invalid date: false.\" },\r\n            { input: null,      description: \"Invalid date: null.\" },\r\n            { input: undefined, description: \"Invalid date: undefined.\" },\r\n            { input: \"alma\",    description: \"Invalid date: string.\" },\r\n            { input: \"\",        description: \"Invalid date: empty string.\" },\r\n            { input: {} as any, description: \"Invalid date: other object.\" },\r\n            { input: function(){} as any, description: \"Invalid date: function.\" },\r\n        ];\r\n\r\n        // throws.forEach((run) => {\r\n        //     it(run.description, () => {\r\n        //         expect(() => parser.parse(run.input, utcOptions)).toThrow();\r\n        //     });\r\n        // });\r\n\r\n        let runs = [\r\n            { input: new Date(100), output: new DateSlider.InnerModel(1970, 1, 1, 1, 40, 0), description: \"Valid date: from timestamp.\" },\r\n            // JS date-month is [0-11] DateSliderModel-month is [1-12]\r\n            { input: new Date(2000, 0),                output: new DateSlider.InnerModel(2000, 1, 1, 0, 0, 0), description: \"Valid date: month is given.\" },\r\n            { input: new Date(2000, 0, 1),             output: new DateSlider.InnerModel(2000, 1, 1, 0, 0, 0), description: \"Valid date: day is given.\" },\r\n            { input: new Date(2000, 0, 1, 2),          output: new DateSlider.InnerModel(2000, 1, 1, 2, 0, 0), description: \"Valid date: hour is given.\" },\r\n            { input: new Date(2000, 0, 1, 2, 3),       output: new DateSlider.InnerModel(2000, 1, 1, 2, 3, 0), description: \"Valid date: minutes is given.\" },\r\n            { input: new Date(2000, 0, 1, 2, 3, 4),    output: new DateSlider.InnerModel(2000, 1, 1, 2, 3, 4), description: \"Valid date: seconds is given.\" },\r\n            { input: new Date(2000, 0, 1, 2, 3, 4, 5), output: new DateSlider.InnerModel(2000, 1, 1, 2, 3, 4), description: \"Valid date: milliseconds is given.\" },\r\n        ];\r\n\r\n        // runs.forEach((run) => {\r\n        //     it(run.description, () => {\r\n        //         expect(parser.parse(run.input, utcOptions).model).toEqual(run.output);\r\n        //     });\r\n        // });\r\n    });\r\n}\r\n","module DateSliderTest.Parser {\r\n    describe(\"String parser.\", () => {\r\n        let parser: DateSlider.Parser.StringParser;\r\n        let forInvalidOptions: DateSlider.Parser.StringParserOptions;\r\n\r\n        beforeEach(() => {\r\n            parser = new DateSlider.Parser.StringParser();\r\n            forInvalidOptions = new DateSlider.Parser.StringParserOptions(\"\", \"\");\r\n        });\r\n\r\n        let throws = [\r\n            { input: -1,        options: forInvalidOptions, description: \"Invalid string: number < 0.\" },\r\n            { input: 0,         options: forInvalidOptions, description: \"Invalid string: number = 0.\" },\r\n            { input: -1,        options: forInvalidOptions, description: \"Invalid string: number > 0.\" },\r\n            { input: true,      options: forInvalidOptions, description: \"Invalid string: true.\" },\r\n            { input: false,     options: forInvalidOptions, description: \"Invalid string: false.\" },\r\n            { input: null,      options: forInvalidOptions, description: \"Invalid string: null.\" },\r\n            { input: undefined, options: forInvalidOptions, description: \"Invalid string: undefined.\" },\r\n            { input: {} as any, options: forInvalidOptions, description: \"Invalid string: object.\" },\r\n            { input: function() {} as any, options: forInvalidOptions, description: \"Invalid string: function.\" },\r\n        ];\r\n\r\n        // throws.forEach((run) => {\r\n        //     it(run.description, () => {\r\n        //         expect(() => parser.parse(run.input, run.options).model).toThrow();\r\n        //     });\r\n        // });\r\n\r\n        let runs = [\r\n            { input: \"2017-01-27\",           options: new DateSlider.Parser.StringParserOptions(\"yyyy-MM-dd\", \"\"), output: new DateSlider.InnerModel(2017, 1, 27, 0, 0, 0),   description: \"Valid string and format: ISO 8601 date only.\" },\r\n            { input: \"2017-01-27 11:15Z\",    options: new DateSlider.Parser.StringParserOptions(\"yyyy-MM-dd HH:mmK\", \"\"), output: new DateSlider.InnerModel(2017, 1, 27, 1, 15, 0),  description: \"Valid string and format: ISO 8601 date and time.\" },\r\n            { input: \"2017-01-27 11:15:21Z\", options: new DateSlider.Parser.StringParserOptions(\"yyyy-MM-dd HH:mmK\", \"\"), output: new DateSlider.InnerModel(2017, 1, 27, 1, 15, 21), description: \"Valid string and format: ISO 8601 date and time with seconds.\" },\r\n            { input: \"2017-01-27T11:15Z\",    options: new DateSlider.Parser.StringParserOptions(\"yyyy-MM-ddTHH:mmK\", \"\"), output: new DateSlider.InnerModel(2017, 1, 27, 1, 15, 0),  description: \"Valid timestamp:  ISO 8601 date and time with T.\" },\r\n        ];\r\n\r\n        // runs.forEach((run) => {\r\n        //     it(run.description, () => {\r\n        //         expect(parser.parse(run.input, run.options).model).toEqual(run.output);\r\n        //     });\r\n        // });\r\n    });\r\n}\r\n","module DateSliderTest.Parser {\r\n    describe(\"Unix timestamp parser.\", () => {\r\n        let parser: DateSlider.Parser.UnixTimestampParser;\r\n        let msOptions: DateSlider.Parser.UnixTimestampParserOptions;\r\n        let secondOptions: DateSlider.Parser.UnixTimestampParserOptions;\r\n\r\n        beforeEach(() => {\r\n            parser = new DateSlider.Parser.UnixTimestampParser();\r\n            msOptions = new DateSlider.Parser.UnixTimestampParserOptions(\"milliseconds\");\r\n            secondOptions = new DateSlider.Parser.UnixTimestampParserOptions(\"seconds\");\r\n        });\r\n\r\n        let throws = [\r\n            { input: null,      description: \"Invalid timestamp: null.\" },\r\n            { input: true,      description: \"Invalid timestamp: true.\" },\r\n            { input: false,     description: \"Invalid timestamp: false.\" },\r\n            { input: undefined, description: \"Invalid timestamp: undefined.\" },\r\n            { input: \"alma\",    description: \"Invalid timestamp: string.\" },\r\n            { input: \"\",        description: \"Invalid timestamp: empty string.\" },\r\n            { input: {} as any, description: \"Invalid timestamp: object.\" },\r\n            { input: \"100\",     description: \"Invalid timestamp: number as a string.\" },\r\n            { input: \"100000\",  output: null, description: \"Invalid timestamp: number as a string.\" },\r\n            { input: function() {} as any, description: \"Invalid timestamp: function.\" },\r\n        ];\r\n\r\n        throws.forEach((run) => {\r\n            it(run.description, () => {\r\n                expect(() => parser.parse(run.input, secondOptions)).toThrow();\r\n            });\r\n\r\n            it(run.description, () => {\r\n                expect(() => parser.parse(run.input, msOptions)).toThrow();\r\n            });\r\n        });\r\n\r\n        let secondRuns = [\r\n            { input: -100,  output: new DateSlider.InnerModel(1969, 12, 31, 23, 58, 20), description: \"Valid second timestamp: -100.\" },\r\n            { input: -1,    output: new DateSlider.InnerModel(1969, 12, 31, 23, 59, 59), description: \"Valid second timestamp: -1.\" },\r\n            { input: 0,     output: new DateSlider.InnerModel(1970, 1, 1, 0, 0, 0),      description: \"Valid second timestamp: 0.\" },\r\n            { input: 1,     output: new DateSlider.InnerModel(1970, 1, 1, 0, 0, 1),      description: \"Valid second timestamp: 1.\" },\r\n            { input: 100,   output: new DateSlider.InnerModel(1970, 1, 1, 0, 1, 40),     description: \"Valid second timestamp: 100.\" },\r\n        ];\r\n\r\n        secondRuns.forEach((run) => {\r\n            it(run.description, () => {\r\n                expect(parser.parse(run.input, secondOptions).model).toEqual(run.output);\r\n            });\r\n        });\r\n\r\n        let msRuns = [\r\n            { input: -100000,   output: new DateSlider.InnerModel(1969, 12, 31, 23, 58, 20), description: \"Valid millisecond timestamp: < -1000.\" },\r\n            { input: -1000,     output: new DateSlider.InnerModel(1969, 12, 31, 23, 59, 59), description: \"Valid millisecond timestamp: -1000.\" },\r\n            { input: -999,      output: new DateSlider.InnerModel(1969, 12, 31, 23, 59, 59), description: \"Valid millisecond timestamp: -999.\" },\r\n            { input: -1,        output: new DateSlider.InnerModel(1969, 12, 31, 23, 59, 59), description: \"Valid millisecond timestamp: -1.\" },\r\n            { input: 0,         output: new DateSlider.InnerModel(1970, 1, 1, 0, 0, 0),      description: \"Valid millisecond timestamp: 0.\" },\r\n            { input: 1,         output: new DateSlider.InnerModel(1970, 1, 1, 0, 0, 0),      description: \"Valid millisecond timestamp: 1.\" },\r\n            { input: 999,       output: new DateSlider.InnerModel(1970, 1, 1, 0, 0, 0),      description: \"Valid millisecond timestamp: 999.\" },\r\n            { input: 1000,      output: new DateSlider.InnerModel(1970, 1, 1, 0, 0, 1),      description: \"Valid millisecond timestamp: 1000.\" },\r\n            { input: 100000,    output: new DateSlider.InnerModel(1970, 1, 1, 0, 1, 40),     description: \"Valid millisecond timestamp: > 1000.\" },\r\n        ];\r\n\r\n        msRuns.forEach((run) => {\r\n            it(run.description, () => {\r\n                expect(parser.parse(run.input, msOptions).model).toEqual(run.output);\r\n            });\r\n        });\r\n    });\r\n}\r\n"]}