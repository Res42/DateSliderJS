{"version":3,"sources":["formatter/unix-timestamp-formatter-test.ts","formatter/unix-timestamp-ms-formatter-test.ts","integration/parse-format/unix-timestamp-ms-test.ts","integration/parse-format/unix-timestamp-test.ts","parser/date-parser-test.ts","parser/string-parser-test.ts","parser/unix-timestamp-ms-parser-test.ts","parser/unix-timestamp-parser-test.ts"],"names":[],"mappings":"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","file":"tests.js","sourcesContent":["module DateSliderTest.Formatter {\r\n    describe(\"Unix timestamp formatter.\", () => {\r\n        let formatter: DateSlider.Formatter.UnixTimestampFormatter;\r\n\r\n        beforeEach(() => {\r\n            formatter = new DateSlider.Formatter.UnixTimestampFormatter();\r\n        });\r\n\r\n        let runs = [\r\n            { input: null, output: null, description: \"Invalid model: null.\" },\r\n            { input: new DateSlider.DateSliderModel(1969, 1, 1, 0, 0, 0),    output: -31536000, description: \"Valid model: negative timestamp.\" },\r\n            { input: new DateSlider.DateSliderModel(1970, 1, 1, 0, 0, 0),    output: 0,         description: \"Valid model.\" },\r\n            { input: new DateSlider.DateSliderModel(2000, 1, 1, 0, 0, 0),    output: 946684800, description: \"Valid model.\" },\r\n            { input: new DateSlider.DateSliderModel(2000, 12, 31, 0, 0, 0),  output: 978220800, description: \"Valid model.\" },\r\n            { input: new DateSlider.DateSliderModel(2000, 1, 1, 12, 30, 30), output: 946729830, description: \"Valid model.\" },\r\n            { input: new DateSlider.DateSliderModel(2000, 1, 1, 23, 59, 59), output: 946771199, description: \"Valid model.\" },\r\n        ];\r\n\r\n        runs.forEach((run) => {\r\n            it(run.description, () => {\r\n                expect(formatter.format(run.input, null)).toBe(run.output);\r\n            });\r\n        });\r\n    });\r\n}\r\n","module DateSliderTest.Formatter {\r\n    describe(\"Unix timestamp (in milliseconds) formatter.\", () => {\r\n        let formatter: DateSlider.Formatter.UnixTimestampMsFormatter;\r\n\r\n        beforeEach(() => {\r\n            formatter = new DateSlider.Formatter.UnixTimestampMsFormatter();\r\n        });\r\n\r\n        let runs = [\r\n            { input: null, output: null, description: \"Invalid model: null.\" },\r\n            { input: new DateSlider.DateSliderModel(1969, 1, 1, 0, 0, 0),    output: -31536000000, description: \"Valid model: negative timestamp.\" },\r\n            { input: new DateSlider.DateSliderModel(1970, 1, 1, 0, 0, 0),    output: 0,            description: \"Valid model.\" },\r\n            { input: new DateSlider.DateSliderModel(2000, 1, 1, 0, 0, 0),    output: 946684800000, description: \"Valid model.\" },\r\n            { input: new DateSlider.DateSliderModel(2000, 12, 31, 0, 0, 0),  output: 978220800000, description: \"Valid model.\" },\r\n            { input: new DateSlider.DateSliderModel(2000, 1, 1, 12, 30, 30), output: 946729830000, description: \"Valid model.\" },\r\n            { input: new DateSlider.DateSliderModel(2000, 1, 1, 23, 59, 59), output: 946771199000, description: \"Valid model.\" },\r\n        ];\r\n\r\n        runs.forEach((run) => {\r\n            it(run.description, () => {\r\n                expect(formatter.format(run.input, null)).toBe(run.output);\r\n            });\r\n        });\r\n    });\r\n}\r\n","module DateSliderTest.Integration.ParseFormat {\r\n    describe(\"Unix timestamp in milliseconds parsing and formatting.\", () => {\r\n        let parser: DateSlider.Parser.UnixTimestampMsParser;\r\n        let formatter: DateSlider.Formatter.UnixTimestampMsFormatter;\r\n\r\n        beforeEach(() => {\r\n            parser = new DateSlider.Parser.UnixTimestampMsParser();\r\n            formatter = new DateSlider.Formatter.UnixTimestampMsFormatter();\r\n        });\r\n\r\n        let runs = [\r\n            { input: null,      output: null, description: \"Invalid timestamp: null.\" },\r\n            { input: true,      output: null, description: \"Invalid timestamp: true.\" },\r\n            { input: false,     output: null, description: \"Invalid timestamp: false.\" },\r\n            { input: undefined, output: null, description: \"Invalid timestamp: undefined.\" },\r\n            { input: \"alma\",    output: null, description: \"Invalid timestamp: string.\" },\r\n            { input: \"\",        output: null, description: \"Invalid timestamp: empty string.\" },\r\n            { input: {} as any, output: null, description: \"Invalid timestamp: object.\" },\r\n            { input: function() {} as any, output: null, description: \"Invalid timestamp: function.\" },\r\n            { input: -31536000, output: -31536000, description: \"Valid timestamp: negative.\" },\r\n            { input: 0,         output: 0,         description: \"Valid timestamp.\" },\r\n            { input: 946684800, output: 946684800, description: \"Valid timestamp.\" },\r\n            { input: 978220800, output: 978220800, description: \"Valid timestamp.\" },\r\n            { input: 946729830, output: 946729830, description: \"Valid timestamp.\" },\r\n            { input: 946771199, output: 946771199, description: \"Valid timestamp.\" },\r\n        ];\r\n\r\n        runs.forEach((run) => {\r\n            it(run.description, () => {\r\n                expect(formatter.format(parser.parse(run.input), null)).toBe(run.input);\r\n            });\r\n        });\r\n    });\r\n}\r\n","module DateSliderTest.Integration.ParseFormat {\r\n    describe(\"Unix timestamp parsing and formatting.\", () => {\r\n        let parser: DateSlider.Parser.UnixTimestampParser;\r\n        let formatter: DateSlider.Formatter.UnixTimestampFormatter;\r\n\r\n        beforeEach(() => {\r\n            parser = new DateSlider.Parser.UnixTimestampParser();\r\n            formatter = new DateSlider.Formatter.UnixTimestampFormatter();\r\n        });\r\n\r\n        let runs = [\r\n            { input: null,      output: null, description: \"Invalid timestamp: null.\" },\r\n            { input: true,      output: null, description: \"Invalid timestamp: true.\" },\r\n            { input: false,     output: null, description: \"Invalid timestamp: false.\" },\r\n            { input: undefined, output: null, description: \"Invalid timestamp: undefined.\" },\r\n            { input: \"alma\",    output: null, description: \"Invalid timestamp: string.\" },\r\n            { input: \"\",        output: null, description: \"Invalid timestamp: empty string.\" },\r\n            { input: {} as any, output: null, description: \"Invalid timestamp: object.\" },\r\n            { input: function() {} as any, output: null, description: \"Invalid timestamp: function.\" },\r\n            { input: -31536000, output: -31536000, description: \"Valid timestamp: negative.\" },\r\n            { input: 0,         output: 0,         description: \"Valid timestamp.\" },\r\n            { input: 946684800, output: 946684800, description: \"Valid timestamp.\" },\r\n            { input: 978220800, output: 978220800, description: \"Valid timestamp.\" },\r\n            { input: 946729830, output: 946729830, description: \"Valid timestamp.\" },\r\n            { input: 946771199, output: 946771199, description: \"Valid timestamp.\" },\r\n        ];\r\n\r\n        runs.forEach((run) => {\r\n            it(run.description, () => {\r\n                expect(formatter.format(parser.parse(run.input), null)).toBe(run.output);\r\n            });\r\n        });\r\n    });\r\n}\r\n","module DateSliderTest.Parser {\r\n    describe(\"Date parser.\", () => {\r\n        let parser: DateSlider.Parser.DateParser;\r\n\r\n        beforeEach(() => {\r\n            parser = new DateSlider.Parser.DateParser();\r\n        });\r\n\r\n        let runs = [\r\n            { input: -1,        output: null, description: \"Invalid date: negative number.\" },\r\n            { input: 0,         output: null, description: \"Invalid date: zero.\" },\r\n            { input: 1,         output: null, description: \"Invalid date: number.\" },\r\n            { input: true,      output: null, description: \"Invalid date: true.\" },\r\n            { input: false,     output: null, description: \"Invalid date: false.\" },\r\n            { input: null,      output: null, description: \"Invalid date: null.\" },\r\n            { input: undefined, output: null, description: \"Invalid date: undefined.\" },\r\n            { input: \"alma\",    output: null, description: \"Invalid date: string.\" },\r\n            { input: \"\",        output: null, description: \"Invalid date: empty string.\" },\r\n            { input: {} as any, output: null, description: \"Invalid date: other object.\" },\r\n            { input: function(){} as any, output: null, description: \"Invalid date: function.\" },\r\n            { input: new Date(100), output: new DateSlider.DateSliderModel(1970, 1, 1, 1, 40, 0), description: \"Valid date: from timestamp.\" },\r\n            // JS date-month is [0-11] DateSliderModel-month is [1-12]\r\n            { input: new Date(2000, 0),                output: new DateSlider.DateSliderModel(2000, 1, 1, 0, 0, 0), description: \"Valid date: month is given.\" },\r\n            { input: new Date(2000, 0, 1),             output: new DateSlider.DateSliderModel(2000, 1, 1, 0, 0, 0), description: \"Valid date: day is given.\" },\r\n            { input: new Date(2000, 0, 1, 2),          output: new DateSlider.DateSliderModel(2000, 1, 1, 2, 0, 0), description: \"Valid date: hour is given.\" },\r\n            { input: new Date(2000, 0, 1, 2, 3),       output: new DateSlider.DateSliderModel(2000, 1, 1, 2, 3, 0), description: \"Valid date: minutes is given.\" },\r\n            { input: new Date(2000, 0, 1, 2, 3, 4),    output: new DateSlider.DateSliderModel(2000, 1, 1, 2, 3, 4), description: \"Valid date: seconds is given.\" },\r\n            { input: new Date(2000, 0, 1, 2, 3, 4, 5), output: new DateSlider.DateSliderModel(2000, 1, 1, 2, 3, 4), description: \"Valid date: milliseconds is given.\" },\r\n        ];\r\n\r\n        runs.forEach((run) => {\r\n            it(run.description, () => {\r\n                expect(parser.parse(run.input)).toBe(run.output);\r\n            });\r\n        });\r\n    });\r\n}\r\n","module DateSliderTest.Parser {\r\n    describe(\"String parser.\", () => {\r\n        let parser: DateSlider.Parser.StringParser;\r\n\r\n        beforeEach(() => {\r\n            parser = new DateSlider.Parser.StringParser();\r\n        });\r\n\r\n        let runs = [\r\n            // invalid input\r\n            { input: -1,        format: \"\", culture: \"\", output: null, description: \"Invalid string: number < 0.\" },\r\n            { input: 0,         format: \"\", culture: \"\", output: null, description: \"Invalid string: number = 0.\" },\r\n            { input: -1,        format: \"\", culture: \"\", output: null, description: \"Invalid string: number > 0.\" },\r\n            { input: true,      format: \"\", culture: \"\", output: null, description: \"Invalid string: true.\" },\r\n            { input: false,     format: \"\", culture: \"\", output: null, description: \"Invalid string: false.\" },\r\n            { input: null,      format: \"\", culture: \"\", output: null, description: \"Invalid string: null.\" },\r\n            { input: undefined, format: \"\", culture: \"\", output: null, description: \"Invalid string: undefined.\" },\r\n            { input: {} as any, format: \"\", culture: \"\", output: null, description: \"Invalid string: object.\" },\r\n            { input: function() {} as any, format: \"\", culture: \"\", output: null, description: \"Invalid string: function.\" },\r\n            // invalid format, culture?\r\n            // valid\r\n            { input: \"2017-01-27\",           format: \"yyyy-MM-dd\",        culture: \"\", output: new DateSlider.DateSliderModel(2017, 1, 27, 0, 0, 0),   description: \"Valid string and format: ISO 8601 date only.\" },\r\n            { input: \"2017-01-27 11:15Z\",    format: \"yyyy-MM-dd HH:mmK\", culture: \"\", output: new DateSlider.DateSliderModel(2017, 1, 27, 1, 15, 0),  description: \"Valid string and format: ISO 8601 date and time.\" },\r\n            { input: \"2017-01-27 11:15:21Z\", format: \"yyyy-MM-dd HH:mmK\", culture: \"\", output: new DateSlider.DateSliderModel(2017, 1, 27, 1, 15, 21), description: \"Valid string and format: ISO 8601 date and time with seconds.\" },\r\n            { input: \"2017-01-27T11:15Z\",    format: \"yyyy-MM-ddTHH:mmK\", culture: \"\", output: new DateSlider.DateSliderModel(2017, 1, 27, 1, 15, 0),  description: \"Valid timestamp:  ISO 8601 date and time with T.\" },\r\n        ];\r\n\r\n        runs.forEach((run) => {\r\n            it(run.description, () => {\r\n                expect(parser.parse(run.input, run.format, run.culture)).toBe(run.output);\r\n            });\r\n        });\r\n    });\r\n}\r\n","module DateSliderTest.Parser {\r\n    describe(\"Unix timestamp (in milliseconds) parser.\", () => {\r\n        let parser: DateSlider.Parser.UnixTimestampMsParser;\r\n\r\n        beforeEach(() => {\r\n            parser = new DateSlider.Parser.UnixTimestampMsParser();\r\n        });\r\n\r\n        let runs = [\r\n            { input: null,      output: null, description: \"Invalid timestamp: null.\" },\r\n            { input: true,      output: null, description: \"Invalid timestamp: true.\" },\r\n            { input: false,     output: null, description: \"Invalid timestamp: false.\" },\r\n            { input: undefined, output: null, description: \"Invalid timestamp: undefined.\" },\r\n            { input: \"alma\",    output: null, description: \"Invalid timestamp: string.\" },\r\n            { input: \"\",        output: null, description: \"Invalid timestamp: empty string.\" },\r\n            { input: {} as any, output: null, description: \"Invalid timestamp: object.\" },\r\n            { input: function() {} as any, output: null, description: \"Invalid timestamp: function.\" },\r\n            { input: -100000,   output: new DateSlider.DateSliderModel(1969, 12, 31, 23, 58, 20), description: \"Valid timestamp: < -1000.\" },\r\n            { input: -1000,     output: new DateSlider.DateSliderModel(1969, 12, 31, 23, 59, 59), description: \"Invalid timestamp: -1000.\" },\r\n            { input: -999,      output: new DateSlider.DateSliderModel(1969, 12, 31, 23, 59, 59), description: \"Valid timestamp: -999.\" },\r\n            { input: -1,        output: new DateSlider.DateSliderModel(1969, 12, 31, 23, 59, 59), description: \"Invalid timestamp: -1.\" },\r\n            { input: 0,         output: new DateSlider.DateSliderModel(1970, 1, 1, 0, 0, 0),      description: \"Valid timestamp: 0.\" },\r\n            { input: 1,         output: new DateSlider.DateSliderModel(1970, 1, 1, 0, 0, 0),      description: \"Valid timestamp: 1.\" },\r\n            { input: 999,       output: new DateSlider.DateSliderModel(1970, 1, 1, 0, 0, 0),      description: \"Valid timestamp: 999.\" },\r\n            { input: 1000,      output: new DateSlider.DateSliderModel(1970, 1, 1, 0, 0, 1),      description: \"Valid timestamp: 1000.\" },\r\n            { input: 100000,    output: new DateSlider.DateSliderModel(1970, 1, 1, 1, 40, 0),     description: \"Valid timestamp: > 1000.\" },\r\n            { input: \"100000\",  output: new DateSlider.DateSliderModel(1970, 1, 1, 1, 40, 0),     description: \"Valid timestamp: number as a string.\" },\r\n        ];\r\n\r\n        runs.forEach((run) => {\r\n            it(run.description, () => {\r\n                expect(parser.parse(run.input)).toBe(run.output);\r\n            });\r\n        });\r\n    });\r\n}\r\n","module DateSliderTest.Parser {\r\n    describe(\"Unix timestamp (in seconds) parser.\", () => {\r\n        let parser: DateSlider.Parser.UnixTimestampParser;\r\n\r\n        beforeEach(() => {\r\n            parser = new DateSlider.Parser.UnixTimestampParser();\r\n        });\r\n\r\n        let runs = [\r\n            { input: null,      output: null, description: \"Invalid timestamp: null.\" },\r\n            { input: true,      output: null, description: \"Invalid timestamp: true.\" },\r\n            { input: false,     output: null, description: \"Invalid timestamp: false.\" },\r\n            { input: undefined, output: null, description: \"Invalid timestamp: undefined.\" },\r\n            { input: \"alma\",    output: null, description: \"Invalid timestamp: string.\" },\r\n            { input: \"\",        output: null, description: \"Invalid timestamp: empty string.\" },\r\n            { input: {} as any, output: null, description: \"Invalid timestamp: object.\" },\r\n            { input: function() {} as any, output: null, description: \"Invalid timestamp: function.\" },\r\n            { input: -100,  output: new DateSlider.DateSliderModel(1969, 12, 31, 23, 58, 20), description: \"Valid timestamp: -100.\" },\r\n            { input: -1,    output: new DateSlider.DateSliderModel(1969, 12, 31, 23, 59, 59), description: \"Valid timestamp: -1.\" },\r\n            { input: 0,     output: new DateSlider.DateSliderModel(1970, 1, 1, 0, 0, 0),      description: \"Valid timestamp: 0.\" },\r\n            { input: 1,     output: new DateSlider.DateSliderModel(1970, 1, 1, 0, 0, 1),      description: \"Valid timestamp: 1.\" },\r\n            { input: 100,   output: new DateSlider.DateSliderModel(1970, 1, 1, 1, 40, 0),     description: \"Valid timestamp: 100.\" },\r\n            { input: \"100\", output: new DateSlider.DateSliderModel(1970, 1, 1, 1, 40, 0),     description: \"Valid timestamp: number as a string.\" },\r\n        ];\r\n\r\n        runs.forEach((run) => {\r\n            it(run.description, () => {\r\n                expect(parser.parse(run.input)).toBe(run.output);\r\n            });\r\n        });\r\n    });\r\n}\r\n"]}