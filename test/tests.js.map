{"version":3,"sources":["parser/date-parser-test.ts","parser/string-parser-test.ts","parser/unix-timestamp-ms-parser-test.ts","parser/unix-timestamp-parser-test.ts"],"names":[],"mappings":"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","file":"tests.js","sourcesContent":["module DateSliderTest.Parser {\r\n    describe(\"Date parser.\", () => {\r\n        let parser: DateSlider.Parser.DateParser;\r\n\r\n        beforeEach(() => {\r\n            parser = new DateSlider.Parser.DateParser();\r\n        });\r\n\r\n        let runs = [\r\n            { input: -1, output: null, description: \"Invalid date: negative number.\" },\r\n            { input: 0, output: null, description: \"Invalid date: zero.\" },\r\n            { input: 1, output: null, description: \"Invalid date: number.\" },\r\n            { input: true, output: null, description: \"Invalid date: true.\" },\r\n            { input: false, output: null, description: \"Invalid date: false.\" },\r\n            { input: null, output: null, description: \"Invalid date: null.\" },\r\n            { input: undefined, output: null, description: \"Invalid date: undefined.\" },\r\n            { input: \"alma\", output: null, description: \"Invalid date: string.\" },\r\n            { input: \"\", output: null, description: \"Invalid date: empty string.\" },\r\n            { input: {} as any, output: null, description: \"Invalid date: other object.\" },\r\n            { input: function(){} as any, output: null, description: \"Invalid date: function.\" },\r\n            { input: new Date(100), output: new DateSlider.DateSliderModel(1970, 1, 1, 1, 40, 0), description: \"Valid date: from timestamp.\" },\r\n            // JS date-month is [0-11] DateSliderModel-month is [1-12]\r\n            { input: new Date(2000, 0), output: new DateSlider.DateSliderModel(2000, 1, 1, 0, 0, 0), description: \"Valid date: month is given.\" },\r\n            { input: new Date(2000, 0, 1), output: new DateSlider.DateSliderModel(2000, 1, 1, 0, 0, 0), description: \"Valid date: day is given.\" },\r\n            { input: new Date(2000, 0, 1, 2), output: new DateSlider.DateSliderModel(2000, 1, 1, 2, 0, 0), description: \"Valid date: hour is given.\" },\r\n            { input: new Date(2000, 0, 1, 2, 3), output: new DateSlider.DateSliderModel(2000, 1, 1, 2, 3, 0), description: \"Valid date: minutes is given.\" },\r\n            { input: new Date(2000, 0, 1, 2, 3, 4), output: new DateSlider.DateSliderModel(2000, 1, 1, 2, 3, 4), description: \"Valid date: seconds is given.\" },\r\n            { input: new Date(2000, 0, 1, 2, 3, 4, 5), output: new DateSlider.DateSliderModel(2000, 1, 1, 2, 3, 4), description: \"Valid date: milliseconds is given.\" },\r\n        ];\r\n\r\n        runs.forEach((run) => {\r\n            it(run.description, () => {\r\n                expect(parser.parse(run.input)).toBe(run.output);\r\n            });\r\n        });\r\n    });\r\n}\r\n","module DateSliderTest.Parser {\r\n    describe(\"String parser.\", () => {\r\n        let parser: DateSlider.Parser.StringParser;\r\n\r\n        beforeEach(() => {\r\n            parser = new DateSlider.Parser.StringParser();\r\n        });\r\n\r\n        let runs = [\r\n            // invalid input\r\n            { input: -1, format: \"\", culture: \"\", output: null, description: \"Invalid string: number < 0.\" },\r\n            { input: 0, format: \"\", culture: \"\", output: null, description: \"Invalid string: number = 0.\" },\r\n            { input: -1, format: \"\", culture: \"\", output: null, description: \"Invalid string: number > 0.\" },\r\n            { input: true, format: \"\", culture: \"\", output: null, description: \"Invalid string: true.\" },\r\n            { input: false, format: \"\", culture: \"\", output: null, description: \"Invalid string: false.\" },\r\n            { input: null, format: \"\", culture: \"\", output: null, description: \"Invalid string: null.\" },\r\n            { input: undefined, format: \"\", culture: \"\", output: null, description: \"Invalid string: undefined.\" },\r\n            { input: {} as any, format: \"\", culture: \"\", output: null, description: \"Invalid string: object.\" },\r\n            { input: function() {} as any, format: \"\", culture: \"\", output: null, description: \"Invalid string: function.\" },\r\n            // invalid format, culture?\r\n            // { input: \"alma\", format: \"\", culture: \"\", output: null, description: \"Invalid string: string.\" },\r\n            // { input: \"alma\", format: \"\", culture: \"\", output: null, description: \"Invalid string: string.\" },\r\n            { input: \"2017-01-27\", format: \"yyyy-MM-dd\", culture: \"\", output: new DateSlider.DateSliderModel(2017, 1, 27, 0, 0, 0), description: \"Valid string and format: ISO 8601 date only.\" },\r\n            { input: \"2017-01-27 11:15Z\", format: \"yyyy-MM-dd HH:mmK\", culture: \"\", output: new DateSlider.DateSliderModel(2017, 1, 27, 1, 15, 0), description: \"Valid string and format: ISO 8601 date and time.\" },\r\n            { input: \"2017-01-27 11:15:21Z\", format: \"yyyy-MM-dd HH:mmK\", culture: \"\", output: new DateSlider.DateSliderModel(2017, 1, 27, 1, 15, 21), description: \"Valid string and format: ISO 8601 date and time with seconds.\" },\r\n            { input: \"2017-01-27T11:15Z\", format: \"yyyy-MM-ddTHH:mmK\", culture: \"\", output: new DateSlider.DateSliderModel(2017, 1, 27, 1, 15, 0), description: \"Valid timestamp:  ISO 8601 date and time with T.\" },\r\n            // TODO?: more formats, cultures?\r\n        ];\r\n\r\n        runs.forEach((run) => {\r\n            it(run.description, () => {\r\n                expect(parser.parse(run.input, run.format, run.culture)).toBe(run.output);\r\n            });\r\n        });\r\n    });\r\n}\r\n","module DateSliderTest.Parser {\r\n    describe(\"Unix timestamp (in milliseconds) parser.\", () => {\r\n        let parser: DateSlider.Parser.UnixTimestampMsParser;\r\n\r\n        beforeEach(() => {\r\n            parser = new DateSlider.Parser.UnixTimestampMsParser();\r\n        });\r\n\r\n        let runs = [\r\n            { input: -1, output: null, description: \"Invalid timestamp: input < 0.\" },\r\n            { input: -1000, output: null, description: \"Invalid timestamp: input < 0.\" },\r\n            { input: true, output: null, description: \"Invalid timestamp: true.\" },\r\n            { input: false, output: null, description: \"Invalid timestamp: false.\" },\r\n            { input: null, output: null, description: \"Invalid timestamp: null.\" },\r\n            { input: undefined, output: null, description: \"Invalid timestamp: undefined.\" },\r\n            { input: \"alma\", output: null, description: \"Invalid timestamp: string.\" },\r\n            { input: \"\", output: null, description: \"Invalid timestamp: empty string.\" },\r\n            { input: {} as any, output: null, description: \"Invalid timestamp: object.\" },\r\n            { input: function() {} as any, output: null, description: \"Invalid timestamp: function.\" },\r\n            { input: 0, output: new DateSlider.DateSliderModel(1970, 1, 1, 0, 0, 0), description: \"Valid timestamp: 0.\" },\r\n            { input: 1, output: new DateSlider.DateSliderModel(1970, 1, 1, 0, 0, 0), description: \"Valid timestamp: 1.\" },\r\n            { input: 999, output: new DateSlider.DateSliderModel(1970, 1, 1, 0, 0, 0), description: \"Valid timestamp: 999.\" },\r\n            { input: 1000, output: new DateSlider.DateSliderModel(1970, 1, 1, 0, 0, 1), description: \"Valid timestamp: input = 1000.\" },\r\n            { input: 100000, output: new DateSlider.DateSliderModel(1970, 1, 1, 1, 40, 0), description: \"Valid timestamp: input > 1000.\" },\r\n            { input: \"100000\", output: new DateSlider.DateSliderModel(1970, 1, 1, 1, 40, 0), description: \"Valid timestamp: number as a string.\" },\r\n        ];\r\n\r\n        runs.forEach((run) => {\r\n            it(run.description, () => {\r\n                expect(parser.parse(run.input)).toBe(run.output);\r\n            });\r\n        });\r\n    });\r\n}\r\n","module DateSliderTest.Parser {\r\n    describe(\"Unix timestamp (in seconds) parser.\", () => {\r\n        let parser: DateSlider.Parser.UnixTimestampParser;\r\n\r\n        beforeEach(() => {\r\n            parser = new DateSlider.Parser.UnixTimestampParser();\r\n        });\r\n\r\n        let runs = [\r\n            { input: -1, output: null, description: \"Invalid timestamp: input < 0.\" },\r\n            { input: null, output: null, description: \"Invalid timestamp: null.\" },\r\n            { input: true, output: null, description: \"Invalid timestamp: true.\" },\r\n            { input: false, output: null, description: \"Invalid timestamp: false.\" },\r\n            { input: undefined, output: null, description: \"Invalid timestamp: undefined.\" },\r\n            { input: \"alma\", output: null, description: \"Invalid timestamp: string.\" },\r\n            { input: \"\", output: null, description: \"Invalid timestamp: empty string.\" },\r\n            { input: {} as any, output: null, description: \"Invalid timestamp: object.\" },\r\n            { input: function() {} as any, output: null, description: \"Invalid timestamp: function.\" },\r\n            { input: 0, output: new DateSlider.DateSliderModel(1970, 1, 1, 0, 0, 0), description: \"Valid timestamp: 0.\" },\r\n            { input: 1, output: new DateSlider.DateSliderModel(1970, 1, 1, 0, 0, 1), description: \"Valid timestamp: 1.\" },\r\n            { input: 100, output: new DateSlider.DateSliderModel(1970, 1, 1, 1, 40, 0), description: \"Valid timestamp: input > 1.\" },\r\n            { input: \"100\", output: new DateSlider.DateSliderModel(1970, 1, 1, 1, 40, 0), description: \"Valid timestamp: number as a string.\" },\r\n        ];\r\n\r\n        runs.forEach((run) => {\r\n            it(run.description, () => {\r\n                expect(parser.parse(run.input)).toBe(run.output);\r\n            });\r\n        });\r\n    });\r\n}\r\n"]}